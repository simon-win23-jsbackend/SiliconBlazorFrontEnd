@page "/account/notifications"
@using SiliconBlazorFrontEnd.Services
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text.Json.Serialization
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject SignInManager<ApplicationUser> SignInManager
@inject UserService UserService
@inject HttpClient Http
@rendermode InteractiveServer

<div class="container">
    <div class="content">
        <h3>Notifications</h3>
        <EditForm Model="Input" OnValidSubmit="SaveChanges" FormName="EmailNotification">
            <DataAnnotationsValidator />
            <div class="input-group">
                <label>Preferred email for notifications</label>
                <InputText @bind-Value="Input.Email" />
                <ValidationMessage For="@(() => Input.Email)" />
            </div>
            <div>
                <button type="submit" class="btn-theme-s">Save Changes</button>
            </div>
        </EditForm>
        <button class="btn-theme-s" @onclick="UnsubscribeToNewsLetter">Unsubscribe</button>
        <button class="btn-theme-s" @onclick="SubscribeToNewsletter">Subscribe</button>
@*         @if (isSubscribed)
        {
        
        }
        else
        {
           
        } *@



        
        
    </div>
</div>

@code {
    private ApplicationUser user = new();
    private InputModel Input { get; set; } = new();
    private bool isSubscribed = false;


        public class SubscriptionRequest
        {
          [JsonPropertyName("email")]
          public string Email { get; set; }
         }


    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetCurrentUserAsync() ?? null!;
        if (user != null)
        {
            Input.Email = user.Email!;
        }
    }

    private async Task SaveChanges()
    {
       
    }

    private async Task SubscribeToNewsletter()
    {
        var subscriptionRequest = new SubscriptionRequest { Email = Input.Email };

        using (var response = await Http.PostAsJsonAsync("http://localhost:7014/api/newsletter/subscribe", subscriptionRequest))
        {
            if (response.IsSuccessStatusCode)
            {
                
                Console.WriteLine("Subscribed successfully!");
                
            }
            else
            {
                Console.WriteLine("something went wrong");
            }
        }
    }



    private async Task UnsubscribeToNewsLetter()
    {
        var subscriptionRequest = new SubscriptionRequest { Email = Input.Email };
        var response = await Http.PostAsJsonAsync("http://localhost:7014/api/newsletter/unsubscribe", subscriptionRequest);
        if (response.IsSuccessStatusCode)
        {
            isSubscribed = false;
            Console.WriteLine("Unsubscribed successfully!");
            
        }
        else
        {
            var content = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Unsubscription failed: {response.StatusCode} - {content}");
        }
    }


    private sealed class SubscriptionStatusResponse
    {
        public bool IsSubscribed { get; set; }
    }
}
