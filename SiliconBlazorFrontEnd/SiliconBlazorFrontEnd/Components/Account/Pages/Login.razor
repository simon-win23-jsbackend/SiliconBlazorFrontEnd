@page "/signin"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SiliconBlazorFrontEnd.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager


<PageTitle>Log in</PageTitle>



<section id="sign-in">
    <div class="container">
          <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" novalidate>
            <DataAnnotationsValidator />

            

            <h1> Welcome Back</h1>
            <p>Don't have an account yet? <a href="/signup">Sign up here  </a>.</p>

            <div class="content">
                <div id="form-email" class="input-group">
                    <label asp-for="Form.Email"></label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                    <InputText @bind-Value="Input.Email" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                </div>
                <div id="form-password" class="input-group">
                    <label asp-for="Form.Password"></label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                    <InputText type="password" @bind-Value="Input.Password"  autocomplete="current-password" aria-required="true" placeholder="password" />
                </div>
                <div id="form-terms" class="checkbox-group">
                    <InputCheckbox @bind-Value="Input.RememberMe" form-check-input" />
                    <label>Remember Me </label>
                </div>
            </div>

            <button id="form-submit" class="btn-theme-s" type="submit">Sign In</button>

            <a id="form-forgot-password" href="/recover" >Forgot your Password?</a>


        </EditForm>
    </div>
</section>


@code {
    private string? ErrorMessage { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {

        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }
        else
        {
            ErrorMessage = "Error, incorrect email or password.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
